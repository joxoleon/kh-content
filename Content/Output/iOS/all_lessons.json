[
  {
    "questions" : [
      {
        "id" : "solid_principles_q1",
        "question" : "What does the Single Responsibility Principle (SRP) state?",
        "correctAnswerIndex" : 0,
        "answers" : [
          "A class should do only one thing.",
          "A class can have multiple responsibilities.",
          "A class should be closed for modification.",
          "A class should implement all methods of an interface."
        ],
        "proficiency" : "basic",
        "explanation" : "SRP specifies that a class should have only one responsibility, which simplifies testing and maintenance.",
        "type" : "multiple_choice"
      },
      {
        "id" : "solid_principles_q2",
        "question" : "Which SOLID principle helps in extending code without modifying it?",
        "correctAnswerIndex" : 1,
        "answers" : [
          "Single Responsibility Principle",
          "Open-Closed Principle",
          "Liskov Substitution Principle",
          "Dependency Inversion Principle"
        ],
        "proficiency" : "intermediate",
        "type" : "multiple_choice",
        "explanation" : "OCP allows code to be extended by creating new classes or methods rather than altering existing ones."
      },
      {
        "id" : "solid_principles_q3",
        "question" : "Why is the Dependency Inversion Principle important?",
        "correctAnswerIndex" : 1,
        "explanation" : "DIP enables high-level modules to rely on abstractions, promoting flexible and decoupled code.",
        "proficiency" : "advanced",
        "answers" : [
          "It encourages low-level modules to depend on high-level modules.",
          "It enables high-level modules to rely on abstractions rather than concrete classes.",
          "It requires all modules to depend on one main module.",
          "It discourages modularity."
        ],
        "type" : "multiple_choice"
      },
      {
        "id" : "solid_principles_q4",
        "question" : "Which principle encourages creating smaller, more specific interfaces?",
        "correctAnswerIndex" : 1,
        "explanation" : "ISP encourages smaller, specific interfaces that prevent clients from being forced to depend on methods they do not use.",
        "type" : "multiple_choice",
        "answers" : [
          "Single Responsibility Principle",
          "Interface Segregation Principle",
          "Liskov Substitution Principle",
          "Open-Closed Principle"
        ],
        "proficiency" : "intermediate"
      },
      {
        "id" : "solid_principles_q5",
        "question" : "How does the Liskov Substitution Principle affect subclasses?",
        "correctAnswerIndex" : 1,
        "answers" : [
          "Subclasses can implement only half of a superclass's functionality.",
          "Subclasses should be able to replace the superclass without altering the program's correctness.",
          "Subclasses can replace any class in the hierarchy.",
          "Subclasses should depend on low-level modules."
        ],
        "type" : "multiple_choice",
        "proficiency" : "basic",
        "explanation" : "LSP ensures that subclasses can replace a superclass without breaking functionality, maintaining program correctness."
      }
    ],
    "sections" : [
      {
        "title" : "SOLID Principles Introduction",
        "content" : "# Introduction to SOLID Principles for iOS Development\n\n**SOLID** is an acronym representing five fundamental principles in software development that improve the **modularity**, **scalability**, and **maintainability** of code. These principles help developers create systems that are easy to understand, extend, and modify. By adhering to SOLID principles, iOS developers can structure their code to minimize dependencies, reduce the risk of bugs, and improve testability.\n\nThe five principles that form **SOLID** are:\n- **S**: **Single Responsibility Principle (SRP)**\n- **O**: **Open-Closed Principle (OCP)**\n- **L**: **Liskov Substitution Principle (LSP)**\n- **I**: **Interface Segregation Principle (ISP)**\n- **D**: **Dependency Inversion Principle (DIP)**\n\nEach of these principles can be implemented within iOS applications, using **Swift** language features such as protocols, dependency injection, and modular design patterns to improve software design quality.\n\n> \"Applying SOLID principles enables iOS developers to write cleaner, more robust, and maintainable code that aligns well with modern software engineering standards.\""
      },
      {
        "title" : "SOLID Principles",
        "content" : "# SOLID Principles Explained\n\n## Single Responsibility Principle (SRP)\n\n### Definition\nA class should have **only one reason to change**, meaning it should have only one job or responsibility.\n\n### iOS Example\nSuppose we have an `ImageUploader` class in an iOS app. If this class handles **image uploading**, **image validation**, and **UI updates**, it violates SRP as it has multiple responsibilities. We can refactor it by:\n- Separating validation into an `ImageValidator` class.\n- Moving UI updates to the controller.\n- Keeping `ImageUploader` focused solely on uploading.\n\n### Code Example\n    class ImageUploader {\n        func upload(_ image: UIImage) { \/* Upload logic *\/ }\n    }\n\n    class ImageValidator {\n        func validate(_ image: UIImage) -> Bool { \/* Validation logic *\/ }\n    }\n\nWith SRP, each class now has a single, focused responsibility, making testing and maintaining code easier.\n\n---\n\n## Open-Closed Principle (OCP)\n\n### Definition\nSoftware entities should be **open for extension** but **closed for modification**. This principle allows us to add new functionality without altering existing code, minimizing the risk of introducing bugs.\n\n### iOS Example\nImagine a `PaymentProcessor` that needs to support multiple payment methods. By creating a `PaymentMethod` protocol and having each payment method conform to this protocol, we can add new payment methods without changing the `PaymentProcessor` itself.\n\n### Code Example\n    protocol PaymentMethod {\n        func processPayment()\n    }\n\n    class CreditCardPayment: PaymentMethod {\n        func processPayment() { \/* Credit card payment logic *\/ }\n    }\n\n    class ApplePayPayment: PaymentMethod {\n        func processPayment() { \/* Apple Pay payment logic *\/ }\n    }\n\n    class PaymentProcessor {\n        func process(_ paymentMethod: PaymentMethod) {\n            paymentMethod.processPayment()\n        }\n    }\n\nUsing OCP, adding a new payment method only requires creating a new class that conforms to `PaymentMethod`, without modifying `PaymentProcessor`.\n\n---\n\n## Liskov Substitution Principle (LSP)\n\n### Definition\nObjects of a superclass should be **replaceable with objects of a subclass** without affecting the correctness of the program.\n\n### iOS Example\nConsider a superclass `Vehicle` with a method `drive()`. If we have a subclass `Car` that conforms to `Vehicle`, then `Car` should behave in such a way that replacing `Vehicle` with `Car` does not alter program functionality.\n\n### Code Example\n    class Vehicle {\n        func drive() { \/* General driving logic *\/ }\n    }\n\n    class Car: Vehicle {\n        override func drive() { \/* Car-specific driving logic *\/ }\n    }\n\nHere, `Car` is a proper subclass of `Vehicle`, following LSP as it can replace `Vehicle` without breaking functionality.\n\n---\n\n## Interface Segregation Principle (ISP)\n\n### Definition\nClients should not be forced to depend on methods they do not use. This principle advocates for creating smaller, **more specific interfaces** rather than a large, monolithic one.\n\n### iOS Example\nConsider an interface for different types of media players. Instead of one large `MediaPlayer` protocol, we create smaller protocols for distinct functionalities like `AudioPlayer` and `VideoPlayer`.\n\n### Code Example\n    protocol AudioPlayer {\n        func playAudio()\n    }\n\n    protocol VideoPlayer {\n        func playVideo()\n    }\n\n    class MusicApp: AudioPlayer {\n        func playAudio() { \/* Audio playing logic *\/ }\n    }\n\nIn this example, `MusicApp` conforms only to `AudioPlayer` without needing unnecessary methods, making the code more maintainable and adaptable.\n\n---\n\n## Dependency Inversion Principle (DIP)\n\n### Definition\nHigh-level modules should not depend on low-level modules. Both should depend on abstractions.\n\n### iOS Example\nIn an iOS app, a view controller should not depend directly on a networking service. Instead, it should depend on a protocol, and the networking service should implement that protocol.\n\n### Code Example\n    protocol NetworkService {\n        func fetchData()\n    }\n\n    class APIService: NetworkService {\n        func fetchData() { \/* Network fetching logic *\/ }\n    }\n\n    class ViewController {\n        var networkService: NetworkService\n\n        init(networkService: NetworkService) {\n            self.networkService = networkService\n        }\n    }\n\nWith DIP, we can inject a mock service for testing, making the code more modular and testable."
      },
      {
        "title" : "Discussion",
        "content" : "The **SOLID principles** collectively help maintain clean and modular code architecture. However, there can be trade-offs:\n- Over-segmenting interfaces (ISP) may lead to an excessive number of protocols.\n- Following SRP strictly might result in too many classes, which could complicate the codebase.\n- LSP requires careful subclassing to avoid unintended behavior changes.\n\nUltimately, SOLID principles should be applied pragmatically, balancing code clarity with simplicity."
      },
      {
        "title" : "Key Takeaways",
        "content" : "- **SOLID principles** help build **modular, maintainable, and testable** code.\n- **SRP** ensures each class has one responsibility.\n- **OCP** encourages extending, not modifying, existing code.\n- **LSP** ensures subclasses can replace superclasses without issues.\n- **ISP** advocates for small, specific interfaces.\n- **DIP** favors dependency on abstractions, not concrete classes."
      }
    ],
    "metadata" : {
      "tags" : [
        "solid",
        "solid principles",
        "clean",
        "clean architecture",
        "software architecture",
        "architecture",
        "software design"
      ],
      "title" : "SOLID Principles for iOS Development",
      "id" : "solid_principles",
      "description" : "An in-depth lesson on the SOLID principles and their implementation in iOS development to enhance code modularity, maintainability, and scalability."
    }
  },
  {
    "metadata" : {
      "tags" : [
        "mvvm",
        "model-view-viewmodel",
        "mvvm architecture",
        "mvvm design pattern",
        "design pattern",
        "ios architectures"
      ],
      "title" : "MVVM Architecture for iOS Development using SwiftUI",
      "id" : "mvvm_architecture_ios",
      "description" : "An introductory lesson on MVVM architecture and how to implement it in iOS development with SwiftUI, covering key components, benefits, and implementation examples."
    },
    "sections" : [
      {
        "content" : "## Introduction to MVVM Architecture\n\nThe **Model-View-ViewModel (MVVM)** architecture is a design pattern widely used in software development, particularly for building clean and maintainable user interfaces in iOS development. MVVM aims to separate the user interface (UI) from business logic, making code more modular, testable, and scalable.\n\n> In the MVVM pattern, the **Model** represents the data and business logic, the **View** represents the UI elements, and the **ViewModel** acts as a bridge that connects the Model and View, managing data flow and user interactions.\n\nThis architecture is highly compatible with **SwiftUI** due to SwiftUI's declarative nature, which encourages building UIs with data bindings. SwiftUI automatically updates views when the data changes, making MVVM an ideal choice for structuring code and handling UI updates efficiently.\n\n### Why Use MVVM in SwiftUI?\n- **Separation of Concerns**: By dividing responsibilities between Model, View, and ViewModel, MVVM promotes code organization and reusability.\n- **Data Binding**: SwiftUI’s built-in support for data binding allows the ViewModel to update the UI seamlessly whenever data changes.\n- **Improved Testability**: Logic is extracted into the ViewModel, making it easier to test business logic independently of the UI.\n\nIn this lesson, we’ll explore the MVVM pattern, its components, and how to implement it in iOS using SwiftUI.",
        "title" : "MVVM Architecture for iOS Development using SwiftUI Introduction"
      },
      {
        "title" : "MVVM Architecture for iOS Development using SwiftUI",
        "content" : "## Implementing MVVM in SwiftUI\n\nIn the MVVM architecture, each component has a specific role:\n\n### 1. Model\nThe **Model** represents the data and core business logic. It can contain plain data types, structs, or classes that hold the app’s data or represent domain objects. Models are often designed to be independent of the UI.\n\n#### Example:\nIn a simple to-do app, a Model might look like this:\n\n    struct Task: Identifiable {\n        let id: UUID\n        var title: String\n        var isCompleted: Bool\n    }\n\n### 2. ViewModel\nThe **ViewModel** sits between the Model and the View. It handles business logic, data transformations, and any complex interactions needed by the UI. The ViewModel exposes the data and actions the View needs through published properties and methods, which SwiftUI can observe.\n\nViewModels typically use `@Published` properties to notify the View when data changes.\n\n#### Example:\nTo manage a list of tasks, a ViewModel might be implemented like this:\n\n    import Foundation\n    import Combine\n\n    class TaskViewModel: ObservableObject {\n        @Published var tasks: [Task] = []\n        \n        func addTask(title: String) {\n            let newTask = Task(id: UUID(), title: title, isCompleted: false)\n            tasks.append(newTask)\n        }\n        \n        func toggleTaskCompletion(for task: Task) {\n            if let index = tasks.firstIndex(where: { $0.id == task.id }) {\n                tasks[index].isCompleted.toggle()\n            }\n        }\n    }\n\nIn this example:\n- `@Published var tasks` is an array of `Task` objects, updated whenever a task is added or modified.\n- The `addTask` function creates a new task, while `toggleTaskCompletion` toggles a task’s completion status.\n\n### 3. View\nThe **View** is responsible for displaying data on the screen. In MVVM, the View listens to changes from the ViewModel and updates the UI automatically.\n\nViews in SwiftUI are often connected to the ViewModel via the `@ObservedObject` or `@StateObject` property wrapper, which observes changes and updates the UI as necessary.\n\n#### Example:\nHere’s a SwiftUI View that displays the list of tasks:\n\n    import SwiftUI\n\n    struct TaskListView: View {\n        @StateObject var viewModel = TaskViewModel()\n\n        var body: some View {\n            List {\n                ForEach(viewModel.tasks) { task in\n                    HStack {\n                        Text(task.title)\n                            .strikethrough(task.isCompleted)\n                        Spacer()\n                        Button(action: {\n                            viewModel.toggleTaskCompletion(for: task)\n                        }) {\n                            Image(systemName: task.isCompleted ? \"checkmark.circle.fill\" : \"circle\")\n                        }\n                    }\n                }\n            }\n            .navigationTitle(\"Tasks\")\n            .toolbar {\n                Button(\"Add Task\") {\n                    viewModel.addTask(title: \"New Task\")\n                }\n            }\n        }\n    }\n\nIn this example:\n- The `TaskListView` observes the `TaskViewModel` using `@StateObject`, which ensures the view updates when data changes.\n- Each task displays a title and a button to mark it as complete or incomplete.\n\n### Data Binding and Reactive Updates in SwiftUI\nThe integration between **SwiftUI’s data-binding** and MVVM architecture is seamless. SwiftUI observes published changes in the ViewModel, automatically updating the view without manual intervention, which reduces boilerplate code and enhances readability.\n\n### Best Practices for MVVM with SwiftUI\n- **One ViewModel per View**: To keep code organized, assign a unique ViewModel to each View.\n- **Minimize Logic in Views**: Keep the View as “dumb” as possible, leaving all logic to the ViewModel.\n- **Encapsulate Logic in ViewModel**: Place business logic, data formatting, and state management in the ViewModel."
      },
      {
        "content" : "## Pros and Cons of MVVM in SwiftUI\n\n### Pros\n- **Enhanced Testability**: The ViewModel’s separation of concerns makes it easier to test the app’s business logic independently of the UI.\n- **Declarative and Reactive**: SwiftUI’s declarative syntax aligns well with MVVM, automatically updating the UI when the ViewModel’s state changes.\n- **Better Organization**: Splitting data, logic, and UI enhances code modularity and readability.\n\n### Cons\n- **Initial Learning Curve**: MVVM can be challenging for beginners due to the separation of roles and reactive programming.\n- **Complexity**: For smaller apps, MVVM might add unnecessary complexity. The benefits are more apparent in larger applications where modularity is essential.\n- **Increased Files and Code Overhead**: Following MVVM strictly can lead to more files and code, as each View may require its own ViewModel.\n\n### Common Use Cases\n- **Dynamic UI Updates**: MVVM is well-suited for applications with frequent UI updates based on state changes, such as real-time data feeds or user interactions.\n- **Separation of Logic**: MVVM is ideal for apps with complex logic and data processing needs, where keeping logic out of the UI is critical.\n\n### Comparison with Other Patterns\n- **MVC (Model-View-Controller)**: While MVC combines data and logic in the Controller, MVVM separates them, leading to better testability.\n- **VIPER**: MVVM is simpler than VIPER and more suited for declarative UI frameworks like SwiftUI, while VIPER is beneficial for large-scale, complex applications.",
        "title" : "Discussion"
      },
      {
        "content" : "- **MVVM** is a design pattern that separates concerns by dividing the UI (View), business logic (Model), and data-binding logic (ViewModel).\n- **SwiftUI**'s declarative syntax and data-binding features make it highly compatible with the MVVM architecture.\n- The **ViewModel** connects the Model and View, holding business logic and state, which updates the UI reactively.\n- **Best practice**: Keep logic in the ViewModel, making Views as “dumb” as possible for cleaner, more modular code.\n- **MVVM** is ideal for applications with complex UI interactions or frequent data updates, promoting maintainability and testability.",
        "title" : "Key Takeaways"
      }
    ],
    "questions" : [
      {
        "id" : "mvvm_architecture_ios_q1",
        "question" : "In the MVVM pattern, which component is responsible for managing business logic?",
        "correctAnswerIndex" : 1,
        "answers" : [
          "View",
          "ViewModel",
          "Model",
          "Controller"
        ],
        "explanation" : "The ViewModel holds business logic, keeping the View focused solely on UI presentation.",
        "type" : "multiple_choice",
        "proficiency" : "basic"
      },
      {
        "id" : "mvvm_architecture_ios_q2",
        "question" : "Which property wrapper in SwiftUI helps observe changes in the ViewModel?",
        "correctAnswerIndex" : 0,
        "answers" : [
          "@StateObject",
          "@EnvironmentObject",
          "@Binding",
          "@Published"
        ],
        "type" : "multiple_choice",
        "proficiency" : "intermediate",
        "explanation" : "The @StateObject property wrapper creates and owns an instance of the ViewModel, observing changes for reactive UI updates."
      },
      {
        "id" : "mvvm_architecture_ios_q3",
        "question" : "What is a potential disadvantage of MVVM in iOS development?",
        "correctAnswerIndex" : 1,
        "explanation" : "MVVM has an initial learning curve, especially for beginners, but is generally compatible with SwiftUI and enhances testability.",
        "type" : "multiple_choice",
        "proficiency" : "advanced",
        "answers" : [
          "It makes testing more difficult.",
          "It adds initial complexity for beginners.",
          "It combines UI and business logic.",
          "It has limited compatibility with SwiftUI."
        ]
      },
      {
        "id" : "mvvm_architecture_ios_q4",
        "question" : "What does the Model component represent in MVVM?",
        "correctAnswerIndex" : 1,
        "answers" : [
          "The application's UI elements",
          "The data and business logic",
          "The connection between Model and View",
          "The observable data-binding"
        ],
        "type" : "multiple_choice",
        "explanation" : "The Model in MVVM encapsulates the app’s data and core business logic, separate from the UI.",
        "proficiency" : "intermediate"
      },
      {
        "id" : "mvvm_architecture_ios_q5",
        "question" : "Which SwiftUI property wrapper would you use to share a single ViewModel across multiple Views?",
        "correctAnswerIndex" : 1,
        "answers" : [
          "@StateObject",
          "@EnvironmentObject",
          "@Binding",
          "@Published"
        ],
        "type" : "multiple_choice",
        "explanation" : "Using @EnvironmentObject allows a single ViewModel instance to be shared across multiple Views, enabling global data management.",
        "proficiency" : "advanced"
      }
    ]
  }
]